/*
 * IRremote: IRrecvDemo - demonstrates receiving IR codes with IRrecv
 * An IR detector/demodulator must be connected to the input RECV_PIN.
 * Version 0.1 July, 2009
 * Copyright 2009 Ken Shirriff
 * http://arcfn.com
 */

#include <IRremote.h>
#include "pitches.h"


int RECV_PIN = 15;
int RELAY_PIN = 4;
int buzzer_pin = 8;

IRrecv irrecv(RECV_PIN);
decode_results results;
int thisNote=0;

// Dumps out the decode_results structure.
// Call this after IRrecv::decode()
// void * to work around compiler issue
//void dump(void *v) {
//  decode_results *results = (decode_results *)v
void dump(decode_results *results) {
  int count = results->rawlen;
  if (results->decode_type == UNKNOWN) {
    Serial.println("Could not decode message");
  } 
  else {
    if (results->decode_type == NEC) {
      Serial.print("Decoded NEC: ");
    } 
    else if (results->decode_type == SONY) {
      Serial.print("Decoded SONY: ");
    } 
    else if (results->decode_type == RC5) {
      Serial.print("Decoded RC5: ");
    } 
    else if (results->decode_type == RC6) {
      Serial.print("Decoded RC6: ");
    }
    Serial.print(results->value, HEX);
    Serial.print(" (");
        
    Serial.print(results->bits, DEC);
    Serial.println(" bits)");
  }
  Serial.print("Raw (");
  Serial.print(count, DEC);
  Serial.print("): ");
  
    if(results->value == 0xFF20DF )
       {Serial.println("yes it is in Main\n");
        digitalWrite(12,HIGH);
        delay(100);
        if(digitalRead(17)==HIGH)
           {digitalWrite(17,LOW);
            Serial.println("it was high");
           }
        else
          {digitalWrite(17,HIGH);
          Serial.println("it was low");
          }
       } 

    if(results->value == 0xFFF00F )
       {Serial.println("yes it is in for 1\n");
        digitalWrite(12,HIGH);
        delay(100);
       if(digitalRead(19)==HIGH)
           digitalWrite(19,LOW);
        else
           digitalWrite(19,HIGH);
       } 
    if(results->value == 0xFFB04F )
       {Serial.println("yes it is in for 2\n");
        digitalWrite(12,HIGH);
        delay(100);
       if(digitalRead(18)==HIGH)
           digitalWrite(18,LOW);
        else
           digitalWrite(18,HIGH);
       } 
    if(results->value == 0xFF30CF )
       {Serial.println("yes it is in for 3\n");
        digitalWrite(12,HIGH);
        delay(100);
       if(digitalRead(16)==HIGH)
           digitalWrite(16,LOW);
        else
           digitalWrite(16,HIGH);
       } 

    if(results->value == 0xFFA857 )
       {Serial.println("yes it is in for buzzer UP\n");
           thisNote+=100;
       } 


    if(results->value == 0xFFE817 )
       {Serial.println("yes it is in for buzzer DOWN\n");
           thisNote -= 100;
        } 
}

void setup()
{
  pinMode(12, OUTPUT);     
  pinMode(13, OUTPUT);     
  pinMode(14, OUTPUT);
    

pinMode(RECV_PIN,INPUT);

  pinMode(16, OUTPUT);     
  pinMode(17, OUTPUT);     
  pinMode(18, OUTPUT);     
  pinMode(19, OUTPUT);     

  digitalWrite(14, HIGH);   // set the LED on
  digitalWrite(16, HIGH);   // set the LED on
  digitalWrite(17, HIGH);   // set the LED on
  digitalWrite(18, HIGH);   // set the LED on
  digitalWrite(19, HIGH);   // set the LED on

  delay(3000);

  digitalWrite(14, LOW);   // set the LED on
  digitalWrite(16, LOW);   // set the LED on
  digitalWrite(17, LOW);   // set the LED on
  digitalWrite(18, LOW);   // set the LED on
  digitalWrite(19, LOW);   // set the LED on
  digitalWrite(12, LOW);   // set the LED on

  Serial.begin(115200);
  irrecv.enableIRIn(); // Start the receiver
  tone(8,thisNote);
}



int on = 0;
unsigned long last = millis();

void loop() {
  if (irrecv.decode(&results)) {
    // If it's been at least 1/4 second since the last
    // IR received, toggle the relay
    if (millis() - last > 250) {
      on = !on;
//      digitalWrite(RELAY_PIN, on ? HIGH : LOW);
  //    digitalWrite(13, on ? HIGH : LOW);
      dump(&results);
    }
    last = millis();      

    irrecv.resume(); // Receive the next value
  }
}










